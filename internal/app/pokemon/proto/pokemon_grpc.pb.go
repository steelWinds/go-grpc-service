// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: internal/app/pokemon/proto/pokemon.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PokemonServiceClient is the client API for PokemonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PokemonServiceClient interface {
	CreatePokemon(ctx context.Context, in *CreatePokemonRequest, opts ...grpc.CallOption) (*CreatePokemonResponse, error)
	ReadPokemon(ctx context.Context, in *ReadPokemonRequest, opts ...grpc.CallOption) (*ReadPokemonResponse, error)
	UpdatePokemon(ctx context.Context, in *UpdatePokemonRequest, opts ...grpc.CallOption) (*UpdatePokemonResponse, error)
	DeletePokemon(ctx context.Context, in *DeletePokemonRequest, opts ...grpc.CallOption) (*DeletePokemonResponse, error)
	LiistPokemon(ctx context.Context, in *ListPokemonRequest, opts ...grpc.CallOption) (*ListPokemonResponse, error)
}

type pokemonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPokemonServiceClient(cc grpc.ClientConnInterface) PokemonServiceClient {
	return &pokemonServiceClient{cc}
}

func (c *pokemonServiceClient) CreatePokemon(ctx context.Context, in *CreatePokemonRequest, opts ...grpc.CallOption) (*CreatePokemonResponse, error) {
	out := new(CreatePokemonResponse)
	err := c.cc.Invoke(ctx, "/proto.PokemonService/CreatePokemon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokemonServiceClient) ReadPokemon(ctx context.Context, in *ReadPokemonRequest, opts ...grpc.CallOption) (*ReadPokemonResponse, error) {
	out := new(ReadPokemonResponse)
	err := c.cc.Invoke(ctx, "/proto.PokemonService/ReadPokemon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokemonServiceClient) UpdatePokemon(ctx context.Context, in *UpdatePokemonRequest, opts ...grpc.CallOption) (*UpdatePokemonResponse, error) {
	out := new(UpdatePokemonResponse)
	err := c.cc.Invoke(ctx, "/proto.PokemonService/UpdatePokemon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokemonServiceClient) DeletePokemon(ctx context.Context, in *DeletePokemonRequest, opts ...grpc.CallOption) (*DeletePokemonResponse, error) {
	out := new(DeletePokemonResponse)
	err := c.cc.Invoke(ctx, "/proto.PokemonService/DeletePokemon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokemonServiceClient) LiistPokemon(ctx context.Context, in *ListPokemonRequest, opts ...grpc.CallOption) (*ListPokemonResponse, error) {
	out := new(ListPokemonResponse)
	err := c.cc.Invoke(ctx, "/proto.PokemonService/LiistPokemon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PokemonServiceServer is the server API for PokemonService service.
// All implementations should embed UnimplementedPokemonServiceServer
// for forward compatibility
type PokemonServiceServer interface {
	CreatePokemon(context.Context, *CreatePokemonRequest) (*CreatePokemonResponse, error)
	ReadPokemon(context.Context, *ReadPokemonRequest) (*ReadPokemonResponse, error)
	UpdatePokemon(context.Context, *UpdatePokemonRequest) (*UpdatePokemonResponse, error)
	DeletePokemon(context.Context, *DeletePokemonRequest) (*DeletePokemonResponse, error)
	LiistPokemon(context.Context, *ListPokemonRequest) (*ListPokemonResponse, error)
}

// UnimplementedPokemonServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPokemonServiceServer struct {
}

func (UnimplementedPokemonServiceServer) CreatePokemon(context.Context, *CreatePokemonRequest) (*CreatePokemonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePokemon not implemented")
}
func (UnimplementedPokemonServiceServer) ReadPokemon(context.Context, *ReadPokemonRequest) (*ReadPokemonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPokemon not implemented")
}
func (UnimplementedPokemonServiceServer) UpdatePokemon(context.Context, *UpdatePokemonRequest) (*UpdatePokemonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePokemon not implemented")
}
func (UnimplementedPokemonServiceServer) DeletePokemon(context.Context, *DeletePokemonRequest) (*DeletePokemonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePokemon not implemented")
}
func (UnimplementedPokemonServiceServer) LiistPokemon(context.Context, *ListPokemonRequest) (*ListPokemonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiistPokemon not implemented")
}

// UnsafePokemonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PokemonServiceServer will
// result in compilation errors.
type UnsafePokemonServiceServer interface {
	mustEmbedUnimplementedPokemonServiceServer()
}

func RegisterPokemonServiceServer(s grpc.ServiceRegistrar, srv PokemonServiceServer) {
	s.RegisterService(&PokemonService_ServiceDesc, srv)
}

func _PokemonService_CreatePokemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePokemonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokemonServiceServer).CreatePokemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PokemonService/CreatePokemon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokemonServiceServer).CreatePokemon(ctx, req.(*CreatePokemonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PokemonService_ReadPokemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPokemonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokemonServiceServer).ReadPokemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PokemonService/ReadPokemon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokemonServiceServer).ReadPokemon(ctx, req.(*ReadPokemonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PokemonService_UpdatePokemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePokemonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokemonServiceServer).UpdatePokemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PokemonService/UpdatePokemon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokemonServiceServer).UpdatePokemon(ctx, req.(*UpdatePokemonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PokemonService_DeletePokemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePokemonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokemonServiceServer).DeletePokemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PokemonService/DeletePokemon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokemonServiceServer).DeletePokemon(ctx, req.(*DeletePokemonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PokemonService_LiistPokemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPokemonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokemonServiceServer).LiistPokemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PokemonService/LiistPokemon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokemonServiceServer).LiistPokemon(ctx, req.(*ListPokemonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PokemonService_ServiceDesc is the grpc.ServiceDesc for PokemonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PokemonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PokemonService",
	HandlerType: (*PokemonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePokemon",
			Handler:    _PokemonService_CreatePokemon_Handler,
		},
		{
			MethodName: "ReadPokemon",
			Handler:    _PokemonService_ReadPokemon_Handler,
		},
		{
			MethodName: "UpdatePokemon",
			Handler:    _PokemonService_UpdatePokemon_Handler,
		},
		{
			MethodName: "DeletePokemon",
			Handler:    _PokemonService_DeletePokemon_Handler,
		},
		{
			MethodName: "LiistPokemon",
			Handler:    _PokemonService_LiistPokemon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/app/pokemon/proto/pokemon.proto",
}
